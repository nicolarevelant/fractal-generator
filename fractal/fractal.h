#ifndef FRACTAL_H
#define FRACTAL_H

#include <stdio.h>
#include <stdlib.h>

#define PROGRESS_DELAY_NANOSECONDS 100 * 1000 * 1000 // 100 ms

/**
 * Errors generated by public functions
*/
typedef enum {
	MB_OK, MB_EXEC, MB_ERROR
} fractal_error_t;

/**
 * Configuration used to generate an image (or video frame)
*/
typedef struct {
	// Mandelbrot data
	double x, y, zoom;

	// Julia data
	double julia_x, julia_y, julia_zoom;
	
	int use_julia;
	int width;
	int height;
	int max_iterations;
	int threads;
} fractal_config_t;

/**
 * Configuration used to generate the video
*/
typedef struct {
	double zoom_start;		// initial zoom value
	double zoom_step;		// zoom *= zoom_step every frame
	int frame_rate;			// frame rate
} mb_video_config_t;

typedef void (*mb_on_progress_t)(float progress);
typedef void (*mb_on_save_t)(int is_success);

/* Generates a photo and saves it on a file,
 * if on_progress is set then it will call for progress
 * if equals to 1 o greater indicates the saving part
 */
extern fractal_error_t fractal_begin_photo(fractal_config_t *config,
                          char *filename, mb_on_progress_t on_progress, mb_on_save_t on_save);

/* Generates a video using a specific configuration. For each frame
 * it will change only the zoom, as described in the video configuration.
 */
fractal_error_t fractal_begin_video(fractal_config_t *config, mb_video_config_t *video_config,
		char *filename, mb_on_progress_t on_progress, mb_on_save_t on_save);

/**
 * Stop the current operation
*/
fractal_error_t mb_video_stop();

#endif /* FRACTAL_H */
